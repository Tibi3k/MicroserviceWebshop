# This is a basic workflow to help you get started with Actions

name: Build and push the tagged build to production

# Controls when the workflow will run
on:
  push:
    branches: [main]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build_push_image:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3

  #     - name: Fetch latest version
  #       id: fetch_version
  #       run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
        
  #     - name: Docker Setup Buildx
  #       uses: docker/setup-buildx-action@v2.0.0

  #     - name: Docker Login
  #       uses: docker/login-action@v2.0.0
  #       with:
  #         registry: ${{ secrets.ACR_NAME }}
  #         username: ${{ secrets.ACR_LOGIN }}
  #         password: ${{ secrets.ACR_PASSWORD }}


  #     - name: Build and push basket-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./BasketService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/basket-service:latest
  #         push: true
          
  #     - name: Build and push email-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./EmailService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/email-service:latest
  #         push: true

  #     - name: Build and push order-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./OrderService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/order-service:latest
  #         push: true

  #     - name: Build and push payment-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./PaymentService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/payment-service:latest
  #         push: true

  #     - name: Build and push product-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./ProductService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/product-service:latest
  #         push: true

  #     - name: Build and push node-auth-service
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./NodeAuthService/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/node-auth-service:latest
  #         push: true

  #     - name: Build and push nginx-frontend
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         context: ./
  #         file: ./MicroserviceFrontend/Dockerfile
  #         tags: ${{secrets.ACR_NAME}}/nginx-frontend:latest
  #         push: true

  deploy:
    runs-on: ubuntu-latest   
    #needs: build_push_image
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Helm tool installer
        uses: Azure/setup-helm@v2.0
      
      - name: Azure login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubelogin for non-interactive login
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
          sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
          rm -f kubelogin-linux-amd64.zip
          kubelogin --version

      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v3
        with:
          # Resource Group Name
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          # AKS Cluster Name
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          use-kubelogin: 'true'

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Deploy Networks to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/Networks/basket-net-networkpolicy.yaml
              Manifests/Networks/products-net-networkpolicy.yaml
              Manifests/Networks/rabbitMQnet-networkpolicy.yaml
              Manifests/Networks/traefik-net-networkpolicy.yaml

      - name: Deploy MSSQL to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/MSSQL/datafiles-persistentvolumeclaim.yaml
              Manifests/MSSQL/mssql-deployment.yaml
              Manifests/MSSQL/mssql-service.yaml
          images: |
              mcr.microsoft.com/mssql/server:2019-latest

      - name: Deploy MongoDB to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/MongoDB/mongodb-deployment.yaml
              Manifests/MongoDB/mongoDB-service.yaml
          images: |
              mongo    

      - name: Deploy RabbitMQ to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/RabbitMQService/rabbitmq-deployment.yaml
              Manifests/RabbitMQService/RabbitMQ-service.yaml
          images: |
              rabbitmq:3.9-management

      - name: Deploy BasketService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/BasketService/basket-service-deployment.yaml
              Manifests/BasketService/basket-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/basket-service:latest
      
      - name: Deploy OrderService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/OrderService/order-service-deployment.yaml
              Manifests/OrderService/order-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/order-service:latest

      - name: Deploy PaymentService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/PaymentService/payment-service-deployment.yaml
              Manifests/PaymentService/payment-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/payment-service:latest

      - name: Deploy ProductService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/ProductService/product-service-deployment.yaml
              Manifests/ProductService/product-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/product-service:latest      

      - name: Deploy AuthService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/AuthService/auth-service-deployment.yaml
              Manifests/AuthService/auth-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/node-auth-service:latest      

      - name: Deploy EmailService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/EmailService/email-service-deployment.yaml
              Manifests/EmailService/email-service-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/email-service:latest      

      - name: Deploy NginxService to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'

          manifests: |
              Manifests/NginxService/nginx-deployment.yaml
              Manifests/NginxService/nginx-service.yaml
          images: |
              ${{secrets.ACR_NAME}}/nginx-frontend:latest      

 
