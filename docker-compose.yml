version: '3.9'

volumes:
  datafiles:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  mongod:
  postgres_data:
    driver: local
   

networks:
  products-net:
    external: false
  rabbitMQnet:
    external: false
  basket-net:
    external: false
  traefik-net:
    external: false


services:
  order-service:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    restart: unless-stopped
    networks:
      - products-net
      - rabbitMQnet
      - traefik-net
      - basket-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`localhost`) && Path(`/api/orders{any:.*}`)"
      - "traefik.http.routers.auth-service.entrypoints=web"
      - "traefik.port=80"
    depends_on:
      - RabbitMQ
      - mongoDB
  nginx:
    container_name: AngularNginx
    build: 
      context: .
      dockerfile: MicroserviceFrontend/Dockerfile
    restart: unless-stopped
    networks: 
      - products-net
      - rabbitMQnet
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`localhost`)"
      - "traefik.http.routers.nginx.entrypoints=web"
      - "traefik.port=80"
      - "traefik.http.middlewares.nginxheaders.headers.accesscontrolalloworiginlist=http://localhost:80" 
      - "traefik.http.routers.nginx.middlewares=nginxheaders"
  email-service:
    hostname: EmailService
    container_name: EmailService
    build:
      context: .
      dockerfile: EmailService/Dockerfile
    restart: unless-stopped
    networks:
      - rabbitMQnet
    depends_on:
      - RabbitMQ
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports: 
    - "2666:1433"
    volumes:
      - datafiles:/var/lib/mysql
    environment:
      - ACCEPT_EULA="Y"
      - SA_PASSWORD=Asdf1234
    networks:
      - products-net
  product-service:
    hostname: ProductService
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    depends_on:
      - mssql
      - RabbitMQ
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product-service.rule=Host(`localhost`) && Path(`/api/products{any:.*}`, `/api/categories{any2:.*}`) && Method(`POST`, `DELETE`, `PUT`,`GET`)"
      - "traefik.http.routers.product-service.entrypoints=web"
     # - "traefik.http.middlewares.product-service.replacepath.path=/api/Products"
      - "traefik.port=80"
      - "traefik.http.middlewares.testheader.headers.accesscontrolalloworiginlist=http://localhost"
      #- "traefik.http.middlewares.productsAuth.forwardauth.address=http://host.docker.internal:6200/auth"
      #- "traefik.http.middlewares.productsAuth.forwardauth.authResponseHeaders=Authorization"
      - "traefik.http.routers.product-service.middlewares= testheader@docker"
      #- traefik.http.routers.product-service.middlewares=product-service@docker
      #- "traefik.http.routers.product-service.service=product-service@docker"
      #- "traefik.http.services.product-service.loadbalancer.server.port=80"
      #- "traefik.http.services.product-service.loadbalancer.server.scheme=http"
    environment:
      - DBHOST=mssql
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - products-net
      - rabbitMQnet
      - traefik-net

  basket-service:
    hostname: BasketService
    build:
      context: .
      dockerfile: BasketService/Dockerfile
    depends_on: 
      - mongoDB
      - RabbitMQ
    restart: unless-stopped
    networks:
      - basket-net
      - rabbitMQnet
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.basket-service.rule=Host(`localhost`) && Path(`/api/basket{any:.*}`)"
      - "traefik.http.routers.basket-service.entrypoints=web"
      #- "traefik.http.middlewares.basket-service.replacepath.path=/api/basket"
      - "traefik.port=80"
     # - traefik.http.routers.basket-service.middlewares=basket-service@docker

  mongoDB:
    image: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: basketDB
    networks:
      - basket-net
    volumes:
      - mongod

  traefik-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.6
    # Enables the web UI and tells Traefik to listen to docker
    container_name: traefik
    restart: unless-stopped
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/traefik.yml:/traefik.yml:ro
      - ./config/acme:/acme
    #labels:
     # - "traefik.enable=true"
     # - "traefik.http.routers.traefik-proxy.entrypoints=http"
     #- "traefik.http.routers.traefik-proxy.rule=Host(`localhost`)"
     # - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:secret_password"
     # - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
     # - "traefik.http.routers.traefik-proxy.middlewares=traefik-https-redirect"
     # - "traefik.http.routers.traefik-proxy-secure.entrypoints=https"
     # - "traefik.http.routers.traefik-proxy-secure.rule=Host(`localhost`)"
     # - "traefik.http.routers.traefik-proxy-secure.middlewares=traefik-auth"
     # - "traefik.http.routers.traefik-proxy-secure.tls=true"
     # - "traefik.http.routers.traefik-proxy-secure.tls.certresolver=http"
     # - "traefik.http.routers.traefik-proxy-secure.service=api@internal"
    networks:
      - traefik-net
      - products-net
      - basket-net
      - rabbitMQnet

  RabbitMQ:
    image: rabbitmq:3.9-management
    hostname: rabbitmq
    ports:
    - "4369:4369"
    - "5671:5671"
    - "5672:5672"
    - "25672:25672"
    - "15671:15671"
    - "15672:15672"
    networks:
      - rabbitMQnet

secrets:
  kong_postgres_password:
    file: ./config/POSTGRES_PASSWORD

