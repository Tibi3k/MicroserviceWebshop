version: '3.9'

volumes:
  datafiles:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  mongod:
  postgres_data:
    driver: local
   

networks:
  products-net:
    external: false
  rabbitMQnet:
    external: false
  basket-net:
    external: false
  traefik-net:
    external: false


services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports: 
    - "2666:1433"
    volumes:
      - datafiles:/var/lib/mysql
    restart: always
    environment:
      - ACCEPT_EULA="Y"
      - SA_PASSWORD=Asdf1234
    networks:
      - products-net
  product-service:
    hostname: ProductService
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    depends_on:
      - mssql
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product-service.rule=Host(`localhost`) && Path(`/products`)"
      - "traefik.http.routers.product-service.entrypoints=web"
      - "traefik.http.middlewares.product-service.replacepath.path=/api/Products"
      - "traefik.port=80"
      - traefik.http.routers.product-service.middlewares=product-service@docker
      #- "traefik.http.routers.product-service.service=product-service@docker"
      #- "traefik.http.services.product-service.loadbalancer.server.port=80"
      #- "traefik.http.services.product-service.loadbalancer.server.scheme=http"
    environment:
      - DBHOST=mssql
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - products-net
      - rabbitMQnet
      - traefik-net

  basket-service:
    hostname: BasketService
    build:
      context: .
      dockerfile: BasketService/Dockerfile
    depends_on: 
      - mongoDB
    restart: always
    networks:
      - basket-net
      - rabbitMQnet
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.basket-service.rule=Host(`localhost`) && Path(`/basket`)"
      - "traefik.http.routers.basket-service.entrypoints=web"
      - "traefik.http.middlewares.basket-service.replacepath.path=/api/basket"
      - "traefik.port=80"
      - traefik.http.routers.basket-service.middlewares=basket-service@docker

  mongoDB:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: basketDB
    networks:
      - basket-net
    volumes:
      - mongod

  traefik-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.6
    # Enables the web UI and tells Traefik to listen to docker
    container_name: traefik
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik-net
      - products-net
      - basket-net
      - rabbitMQnet

  RabbitMQ:
    image: rabbitmq:3.9-management
    hostname: rabbitmq
    ports:
    - "4369:4369"
    - "5671:5671"
    - "5672:5672"
    - "25672:25672"
    - "15671:15671"
    - "15672:15672"
    networks:
      - rabbitMQnet

  postgres:
      image: postgres
      volumes:
        - postgres_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password

  keycloak:
      image: quay.io/keycloak/keycloak:legacy
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: Pa55w0rd
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - 9000:8080
      depends_on:
        - postgres

secrets:
  kong_postgres_password:
    file: ./config/POSTGRES_PASSWORD

